{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction UserAPI(token) {\n  _s();\n\n  const [isLogged, setIsLogged] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [cart, setCart] = useState([]);\n  useEffect(() => {\n    if (token) {\n      const getUser = async () => {\n        try {\n          const res = await axios.get('/user/infor', {\n            headers: {\n              Authorization: token\n            }\n          });\n          setIsLogged(true);\n          res.data.role === 1 ? setIsAdmin(true) : setIsAdmin(false);\n          setCart(res.data.cart); // console.log(res)\n        } catch (error) {\n          alert(err.response.data.msg);\n        }\n      };\n\n      getUser();\n    }\n  }, [token]);\n\n  const addCart = async product => {\n    if (!isLogged) return alert(\"Pleaee login to continue buying\");\n    const check = cart.every(item => {\n      return item._id !== product._id;\n    });\n\n    if (check) {\n      setCart([...cart, { ...product,\n        quantity: 1\n      }]);\n      await axios.patch('/user/addcart', {\n        cart: [...cart, { ...product,\n          quantity: 1\n        }]\n      }, {\n        headers: {\n          Authorization: token\n        }\n      });\n    } else {\n      alert(\"This product have been added to cart\");\n    }\n  };\n\n  return {\n    isLogged: [isLogged, setIsLogged],\n    isAdmin: [isAdmin, setIsAdmin],\n    cart: [cart, setCart],\n    addCart: addCart\n  };\n}\n\n_s(UserAPI, \"mKBMlcSzOL4zdnCHHgDRPiGLqqY=\");\n\n_c = UserAPI;\nexport default UserAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAPI\");","map":{"version":3,"sources":["D:/InternshipWork/WorldRefInternshipTask/client/src/api/UserAPI.js"],"names":["useEffect","useState","axios","UserAPI","token","isLogged","setIsLogged","isAdmin","setIsAdmin","cart","setCart","getUser","res","get","headers","Authorization","data","role","error","alert","err","response","msg","addCart","product","check","every","item","_id","quantity","patch"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACG,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,IAAD,EAAMC,OAAN,IAAiBT,QAAQ,CAAC,EAAD,CAA/B;AAEHD,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAGI,KAAH,EAAS;AACR,YAAMO,OAAO,GAAG,YAAS;AACxB,YAAI;AACH,gBAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,aAAV,EAAwB;AACzCC,YAAAA,OAAO,EAAG;AAACC,cAAAA,aAAa,EAAGX;AAAjB;AAD+B,WAAxB,CAAlB;AAGAE,UAAAA,WAAW,CAAC,IAAD,CAAX;AACAM,UAAAA,GAAG,CAACI,IAAJ,CAASC,IAAT,KAAkB,CAAlB,GAAsBT,UAAU,CAAC,IAAD,CAAhC,GAAyCA,UAAU,CAAC,KAAD,CAAnD;AAEAE,UAAAA,OAAO,CAACE,GAAG,CAACI,IAAJ,CAASP,IAAV,CAAP,CAPG,CAQH;AACA,SATD,CASE,OAAOS,KAAP,EAAc;AACfC,UAAAA,KAAK,CAACC,GAAG,CAACC,QAAJ,CAAaL,IAAb,CAAkBM,GAAnB,CAAL;AACA;AACD,OAbD;;AAcAX,MAAAA,OAAO;AACP;AACF,GAlBQ,EAkBP,CAACP,KAAD,CAlBO,CAAT;;AAoBA,QAAMmB,OAAO,GAAG,MAAOC,OAAP,IAAiB;AAC/B,QAAG,CAACnB,QAAJ,EAAc,OAAOc,KAAK,CAAC,iCAAD,CAAZ;AAEd,UAAMM,KAAK,GAAGhB,IAAI,CAACiB,KAAL,CAAWC,IAAI,IAAE;AAC7B,aAAOA,IAAI,CAACC,GAAL,KAAaJ,OAAO,CAACI,GAA5B;AACD,KAFa,CAAd;;AAIA,QAAGH,KAAH,EAAS;AACPf,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAS,EAAC,GAAGe,OAAJ;AAAYK,QAAAA,QAAQ,EAAC;AAArB,OAAT,CAAD,CAAP;AAED,YAAM3B,KAAK,CAAC4B,KAAN,CAAY,eAAZ,EAA4B;AAACrB,QAAAA,IAAI,EAAC,CAAC,GAAGA,IAAJ,EAAS,EAAC,GAAGe,OAAJ;AAAYK,UAAAA,QAAQ,EAAC;AAArB,SAAT;AAAN,OAA5B,EAAqE;AACzEf,QAAAA,OAAO,EAAE;AAACC,UAAAA,aAAa,EAAGX;AAAjB;AADgE,OAArE,CAAN;AAGA,KAND,MAMK;AACHe,MAAAA,KAAK,CAAC,sCAAD,CAAL;AACD;AACF,GAhBD;;AAiBA,SAAO;AACNd,IAAAA,QAAQ,EAAE,CAACA,QAAD,EAAYC,WAAZ,CADJ;AAENC,IAAAA,OAAO,EAAE,CAACA,OAAD,EAAWC,UAAX,CAFH;AAGNC,IAAAA,IAAI,EAAE,CAACA,IAAD,EAAQC,OAAR,CAHA;AAINa,IAAAA,OAAO,EAACA;AAJF,GAAP;AAMA;;GAhDQpB,O;;KAAAA,O;AAkDT,eAAeA,OAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\n\r\nfunction UserAPI(token) {\r\n const [isLogged, setIsLogged] = useState(false)\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n    const [cart,setCart] = useState([])\r\n\r\n useEffect(()=>{\r\n   if(token){\r\n    const getUser = async()=>{\r\n     try {\r\n      const res = await axios.get('/user/infor',{\r\n       headers : {Authorization : token}\r\n      })\r\n      setIsLogged(true)\r\n      res.data.role === 1 ? setIsAdmin(true) : setIsAdmin(false)\r\n\r\n      setCart(res.data.cart)\r\n      // console.log(res)\r\n     } catch (error) {\r\n      alert(err.response.data.msg)\r\n     }\r\n    }\r\n    getUser()\r\n   }\r\n },[token])\r\n\r\n const addCart = async (product)=>{\r\n   if(!isLogged) return alert(\"Pleaee login to continue buying\")\r\n   \r\n   const check = cart.every(item=>{\r\n     return item._id !== product._id\r\n   })\r\n\r\n   if(check){\r\n     setCart([...cart,{...product,quantity:1}])\r\n\r\n    await axios.patch('/user/addcart',{cart:[...cart,{...product,quantity:1}]},{\r\n      headers: {Authorization : token}\r\n    })\r\n   }else{\r\n     alert(\"This product have been added to cart\")\r\n   }\r\n }\r\n return {\r\n  isLogged :[isLogged , setIsLogged],\r\n  isAdmin :[isAdmin , setIsAdmin],\r\n  cart: [cart , setCart],\r\n  addCart:addCart\r\n }\r\n}\r\n\r\nexport default UserAPI\r\n"]},"metadata":{},"sourceType":"module"}